   //left shift krdi array
  //  -1,0, 1, 2,3, 4, 5,6----------n-1
    // 0,1,2,3,4,5,6,7--------------n
    //memoisation
    /*int solve(int i, int j, string &s1, string &s2, vector<vector<int>>&dp){
        
     if(i==0 || j==0)return 0;
        
     if(dp[i][j] != -1)return dp[i][j];   
        
     if(s1[i-1] == s2[j-1]){
         return 1 + solve(i-1, j-1, s1, s2,dp);
     }   
        
     dp[i][j] = max( solve(i-1, j, s1, s2,dp) , solve(i, j-1, s1, s2,dp));   
     return dp[i][j];
    }*/
    
    /*
    //tabulation
    int longestCommonSubsequence(string text1, string text2) {
       
        int n = text1.length();
        int m = text2.length();
        
        vector<vector<int>>dp(n+1, vector<int>(m+1, 0));    
     //   return solve(n, m, text1, text2,dp);
        
        for(int j=0; j<=m; j++){
            dp[0][j] = 0;
        }
        for(int i=0; i<=n; i++){
            dp[i][0] = 0;
        }
        
        
        for(int i=1; i<=n; i++){
            for(int j=1; j<=m; j++){
                
             if(text1[i-1] == text2[j-1])dp[i][j] = 1 + dp[i-1][j-1];   
             else  dp[i][j] = 0 + max(dp[i-1][j] , dp[i][j-1]);   
            }
        }
    return dp[n][m];
    }*/
    
     int longestCommonSubsequence(string text1, string text2) {
       
        int n = text1.length();
        int m = text2.length();
        
       // vector<vector<int>>dp(n+1, vector<int>(m+1, 0));    
     //   return solve(n, m, text1, text2,dp);
        vector<int>prev(m+1, 0), curr(m+1, 0);
        
        for(int j=0; j<=m; j++){
        prev[j] = 0;
        }
        for(int i=0; i<=n; i++){
        curr[0] = 0;
        }
        
        
        for(int i=1; i<=n; i++){
            for(int j=1; j<=m; j++){
                
             if(text1[i-1] == text2[j-1])curr[j] = 1 + prev[j-1];   
             else  curr[j] = 0 + max(prev[j] , curr[j-1]);   
            }
            prev = curr;
        }
    return prev[m];
    
    
     }
    
