 int longestCommonSubsequence(string &s1, string &s2) {
       
    int n = s1.length();
    int m = s2.length();
    
 //   vector<vector<int>>dp(n+1, vector<int>(m+1, 0));
   vector<int>prev(m+1,0), curr(m+1, 0); 
     //base case;    
      for(int j=0; j<=m; j++){
          prev[j] = 0;
      }   
       
      for(int i=0; i<=n; i++){
          curr[0] = 0;
      }   
         
      for(int i=1; i<=n; i++){
          for(int j=1; j<=m; j++){
              
           if(s1[i-1] == s2[j-1])curr[j] = 1 + prev[j-1]; 
           else{
               curr[j] = 0+max(prev[j], curr[j-1]);               
           }   
          }
          prev = curr;
      }
    return prev[m];
     }
    
    int longestPalindromeSubseq(string s) {
    string s1 = s;  
     reverse(s1.begin(), s1.end());      
    return longestCommonSubsequence(s, s1);  
    }
    
    int minInsertions(string s) {
      
    return s.size() - longestPalindromeSubseq(s);
        
    }
