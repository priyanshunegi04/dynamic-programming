  //1 D array space optimisation
       
    //space optimisation
      int numDistinct(string s, string t) {
        int n = s.length();
        int m = t.length();
      //  vector<vector<double>>dp(n+1, vector<double>(m+1, 0));
     vector<double>prev(m+1, 0);
          //base case   
        prev[0] = 1;
    
    for(int i=1; i<=n; i++){
     for(int j=m; j>=1; j--){
          
        if(s[i-1] == t[j-1]){
             prev[j] = prev[j-1]+ prev[j];
        }
    }
    }
        return prev[m];
    }
    
    /*
    //space optimisation
      int numDistinct(string s, string t) {
        int n = s.length();
        int m = t.length();
      //  vector<vector<double>>dp(n+1, vector<double>(m+1, 0));
     vector<double>prev(m+1, 0), curr(m+1,0);
          //base case   
        prev[0] = curr[0] = 1;
    
    for(int i=1; i<=n; i++){
     for(int j=1; j<=m; j++){
          
        if(s[i-1] == t[j-1]){
             curr[j] = prev[j-1]+ prev[j];
        }
       else curr[j] = prev[j];
    }
        prev = curr;
    }
        return prev[m];
    }
    */
    
    /* //TABULATION   
    int numDistinct(string s, string t) {
        int n = s.length();
        int m = t.length();
        vector<vector<double>>dp(n+1, vector<double>(m+1, 0));
     //base case   
        for(int i=0; i<=n; i++){
            dp[i][0] = 1;
        }
    
    for(int i=1; i<=n; i++){
     for(int j=1; j<=m; j++){
          
        if(s[i-1] == t[j-1]){
             dp[i][j] = dp[i-1][j-1]+ dp[i-1][j];
        }
       else dp[i][j] = dp[i-1][j];
    }
    }
        return dp[n][m];
    }*/
    /*
    //Memoisation
    //-1,0,1,2,3,4,5,6,7------n-1;
    // 0,1,2,3,4,5,6,7,8------n;
    int f(int i, int j, string &s, string &t, vector<vector<int>>&dp){
    
     //base case   
       // if(j<0)return 1;
        if(j==0)return 1;
       // if(i<0)return 0;
        if(i==0)return 0;
        if(dp[i][j] != -1)return dp[i][j];
        
        if(s[i-1] == t[j-1]){
            return dp[i][j] = f(i-1, j-1, s,t,dp) + f(i-1, j, s,t, dp);
        }
       else{
          return dp[i][j] = f(i-1,j,s ,t,dp);
       } 
    }
    
    int numDistinct(string s, string t) {
        int n = s.length();
        int m = t.length();
        vector<vector<int>>dp(n+1, vector<int>(m+1, -1));
        return f(n, m, s, t, dp);
    }*/
