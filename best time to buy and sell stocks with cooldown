  // same as buy and sell stocks --2 
    //cannot be space optimised.
    int maxProfit(vector<int>& prices) {
    //cooldown means cannot buy right after sell.
     int n = prices.size();
     vector<vector<int>>dp(n+2, vector<int>(2,0));
      dp[n][0] = dp[n][1] = 0;  
        //tabulation n-1 to 0 becaudse in recursion 0 to n-1.
      for(int i=n-1; i>=0; i--){
          for(int j=0; j<=1; j++){      
           long long profit = 0;
              if(j){
          profit  = max( -prices[i] + dp[i+1][0] , 0 + dp[i+1][1]);
             }
          else{
          profit = max( prices[i] + dp[i+2][1] , 0 + dp[i+1][0]); 
          }
          dp[i][j] = profit;    
          }
      }  
        return dp[0][1]; 

    }
