 //TABULATION
      bool isPalindrome(int s, int e, string &str){
     while(s<e){
         if(str[s] != str[e])return false;
         s++;
         e--;
     }   
    return true;
    } 
   int minCut(string s) {
        int n = s.size();
        vector<int>dp(n+1, 0);
        dp[n] = 0;  
        
   for(int i=n-1; i>=0; i--){     
       int minCost = 1e9;       
       for(int j= i; j<n; j++){
          if(isPalindrome(i, j, s)){
              int cost = 1 + dp[j+1];
              minCost = min(minCost, cost);
          }
      }
       dp[i] = minCost;            
  }   
       return dp[0]-1;
    }
   /* 
    //MEOISATION
    //TIME COMPLEXITY--->AUXILARY STACK SPACE USE
    //tc->o(n^2);
    // sc->o(n) + o(n);
    bool isPalindrome(int s, int e, string &str){
     while(s<e){
         if(str[s] != str[e])return false;
         s++;
         e--;
     }   
    return true;
    }
    int f(int i, int n, string &s, vector<int>&dp){
     if(i == n)return 0;
     if(dp[i] != -1)return dp[i];  
       int minCost = 1e9; 
        
      for(int j= i; j<n; j++){
          if(isPalindrome(i, j, s)){
              int cost = 1 + f(j+1, n, s, dp);
              minCost = min(minCost, cost);
          }
         
      }
    return dp[i] = minCost;
    }
    int minCut(string s) {
        int n = s.size();
        vector<int>dp(n, -1);
        return f(0, n, s,dp)-1;
    }*/
};
