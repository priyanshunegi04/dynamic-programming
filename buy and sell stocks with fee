 //space optimisation
   int maxProfit(vector<int>& prices, int fee) {
        int n = prices.size();
      //  vector<vector<int>>dp(n+1, vector<int>(2,0));
         vector<int>ahead(2,0); 
         vector<int>curr(2, 0);
        ahead[0] = ahead[1] = 0;
        
        for(int idx= n-1; idx>=0; idx--){
            for(int buy = 0; buy<=1; buy++){
                
             if(buy==1){
                 curr[buy] = max(-prices[idx]+ ahead[0], 0 + ahead[1]);
             }   
             else{
                curr[buy] = max(prices[idx] - fee+ ahead[1] , 0 + ahead[0]);
             }   
            }
            ahead = curr;
        }
        return ahead[1];
    }
    //tabulation
   /* int maxProfit(vector<int>& prices, int fee) {
        int n = prices.size();
        vector<vector<int>>dp(n+1, vector<int>(2,0));
            
        dp[n][0] = dp[n][1] = 0;
        
        for(int idx= n-1; idx>=0; idx--){
            for(int buy = 0; buy<=1; buy++){
                
             if(buy==1){
                 dp[idx][buy] = max(-prices[idx]+ dp[idx+1][0], 0 + dp[idx+1][1]);
             }   
             else{
                dp[idx][buy] = max(prices[idx] - fee+ dp[idx+1][1] , 0 + dp[idx+1][0]);
             }   
            }
        }
        return dp[0][1];
    }*/
