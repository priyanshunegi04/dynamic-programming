//space optimisation
     int maxProfit(vector<int>& prices) {
     int n = prices.size();
     vector<long>ahead(2, 0), curr(2,0);
        
      ahead[0] = ahead[1] = 0;  
        
      for(int i=n-1; i>=0; i--){
          for(int j=0; j<=1; j++){      
           long long profit = 0;
              if(j){
          profit  = max( -prices[i] + ahead[0] , 0 + ahead[1]);
             }
          else{
          profit = max( prices[i] + ahead[1] , 0 + ahead[0]); 
          }
          curr[j] = profit;    
          }
          ahead = curr;
      }  
        return ahead[1]; 
    }
    
 /*   //TABULATION
    int maxProfit(vector<int>& prices) {
     int n = prices.size();
     vector<vector<int>>dp(n+1, vector<int>(2,0));
        
      dp[n][0] = dp[n][1] = 0;  
        
      for(int i=n-1; i>=0; i--){
          for(int j=0; j<=1; j++){      
           long long profit = 0;
              if(j){
          profit  = max( -prices[i] + dp[i+1][0] , 0 + dp[i+1][1]);
             }
          else{
          profit = max( prices[i] + dp[i+1][1] , 0 + dp[i+1][0]); 
          }
          dp[i][j] = profit;    
          }
      }  
        return dp[0][1]; 
    }*/
   /* 
    //MEMOISATION
    int f(int idx, int buy, vector<int>&prices, vector<vector<int>> &dp){
    
    if(idx >= prices.size())return 0;
     if(dp[idx][buy]!=-1)return dp[idx][buy];
        
    if(buy == 1){
        return dp[idx][buy]= max( -prices[idx] + f(idx+1, 0, prices,dp), 0 + f(idx+1, 1, prices,dp));

    } 
   return dp[idx][buy]= max( prices[idx] + f(idx+1, 1, prices, dp), 0 + f(idx+1, 0, prices, dp));
   
      }
    
    int maxProfit(vector<int>& prices) {
             int n = prices.size();
        vector<vector<int>>dp(n, vector<int>(2,-1));
        return f(0, 1,prices, dp);
    }*/
