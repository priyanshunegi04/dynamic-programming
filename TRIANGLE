    //SPACE ___OPTIMISATION
 int minimumTotal(vector<vector<int>>& triangle) {
         int n= triangle.size();
         vector<int>front(n, 0);
         vector<int>curr(n,0);
       for(int j=0; j<n; j++){
         front[j] =  triangle[n-1][j];
      }
     
        for(int i=n-2; i>=0; i--){
            for(int j=i; j>=0; j--){
            int d = triangle[i][j] + front[j]; 
           int diag = triangle[i][j] + front[j+1];           
              curr[j] = min(d, diag);
            }
            front = curr;
        }
        return front[0];
 }   
   //TABULATION
/*    int minimumTotal(vector<vector<int>>& triangle) {
        int n= triangle.size();
       vector<vector<int>>dp(n, vector<int>(n,0));
        for(int i=0; i<n; i++){
          dp[n-1][i] =  triangle[n-1][i];
      }
        for(int i=n-2; i>=0; i--){
            for(int j=i; j>=0; j--){
            int d = triangle[i][j] + dp[i+1][j]; 
           int diag = triangle[i][j] + dp[i+1][j+1];           
              dp[i][j] = min(d, diag);
            }
        }
        return dp[0][0];
    }
  */  
    //memoisation
    /*int solve(int i, int j,vector<vector<int>>& triangle,  vector<vector<int>>&dp,int n){
    
   if(i==n-1)return triangle[n-1][j];
   if(dp[i][j] != -1)return dp[i][j];     
        
       int d = triangle[i][j] + solve(i+1, j,triangle,dp, n); 
       int diag = triangle[i][j] + solve(i+1, j+1, triangle,dp, n);
       dp[i][j] = min(d, diag); 
       return dp[i][j]; 
    }
    int minimumTotal(vector<vector<int>>& triangle) {
        int n = triangle.size();
      vector<vector<int>>dp(n, vector<int>(n,-1));
        
        int ans = solve(0,0,triangle, dp,n);
        return ans;
    }*/
};
