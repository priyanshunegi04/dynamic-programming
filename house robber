  /*
    int solve(int n, vector<int>&nums, vector<int>&dp){
      
        if(n<0) return 0;
        if(n==0) return nums[n];
        if(dp[n]!=-1)return dp[n];
        
        int pick = nums[n] + solve(n-2, nums, dp);
        int nonpick = 0 + solve(n-1, nums, dp);
        return dp[n] = max(pick, nonpick);
    }*/
    
    int rob(vector<int>& nums) {
       // int n = nums.size()-1;
       // vector<int>dp(n+1, -1);
        //int ans = solve(n, nums, dp);
       // return ans;
        int prev = nums[0];
        int prev2 = 0;
        int n = nums.size();
        for(int i=1; i<n; i++){
            int take = nums[i] + 0;
           if(i>1){
               take = take + prev2;
           }          
           int nontake = 0 + prev; 
           int curr = max(take, nontake);
            prev2 = prev;
            prev = curr;
        }
    return prev;
    }
