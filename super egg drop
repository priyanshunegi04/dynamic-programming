class Solution {
public:
    int solve(int e, int f, vector<vector<int>>&dp){
          if(f==0 || f==1)return f;
        if(e==1) return f;
        if(dp[e][f] != -1)return dp[e][f];
        
        int mini = 1e9;
        int l = 0, r = f;
        while(l<=r){
             int mid  = (l+r)/2;
            int EggBreak = solve(e-1, mid-1, dp);
            int EggNotBreak = solve(e, f-mid, dp);
            //maximum attempt to break egg or not
            int attempt = 1 + max(EggBreak, EggNotBreak);
            if(EggBreak < EggNotBreak){
                l = mid + 1;
            }
            else{
                r =  mid - 1;
            }
                        
            mini = min(attempt, mini); 
        }
    return dp[e][f] = mini;
    }
    int superEggDrop(int e, int f) {
       vector<vector<int>>dp(e+1, vector<int>(f+1,-1));
       return solve(e,f, dp);
    }
};
