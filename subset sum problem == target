
//SPACE- OPTIMISATION
bool isSubsetSum(vector<int>arr, int sum){

     // code here 
    int n = arr.size();
    int k = sum; 
    vector<int>prev(k+1, 0), curr(k+1, 0);
    //Base case
      prev[0] = curr[0] = true;
       prev[arr[0]] = true;
    
    for(int i=1; i<n; i++){
        for(int j= 1; j<=k; j++){
             bool nontake = prev[j];   
             bool take = false;
             if(j>=arr[i]){
              take = prev[j-arr[i]];
              } 
              curr[j] = take | nontake;
        }
        prev = curr;
    }
    return prev[k];

}



// TABULATION
 /*bool isSubsetSum(vector<int>arr, int sum){
        // code here 
     int n = arr.size();
    int k = sum; 
vector<vector<bool>>dp(n, vector<bool>(k+1, 0));
    //Base case
    for(int i = 0; i<n; i++){
        dp[i][0] = true;
    }
    dp[0][arr[0]] = true;
    
    for(int i=1; i<n; i++){
        for(int j= 1; j<=k; j++){
             bool nontake = dp[i-1][j];   
             bool take = false;
             if(j>=arr[i]){
              take = dp[i-1][j-arr[i]];
              } 
              dp[i][j] = take | nontake;
        }
    }
    return dp[n-1][k];
        
    }*/
/*
//MEMOISATION
   bool solve(int idx, int trgt, vector<int>&arr, vector<vector<int>>&dp){
    if(trgt==0)return true;   
    if(idx==0) return arr[0]==trgt;   
     if(dp[idx][trgt] != -1)return dp[idx][trgt];  
       
    bool nontake = solve(idx-1, trgt, arr, dp);   
     bool take = false;
     if(trgt>=arr[idx]){
         take = solve(idx-1, trgt-arr[idx], arr, dp);
     } 
    return dp[idx][trgt] = take | nontake;      
         
   }
    bool isSubsetSum(vector<int>arr, int sum){
        // code here 
       int n = arr.size();
        int k = sum; 
        vector<vector<int>>dp(n, vector<int>(k+1, -1));
        return solve(n-1, k, arr, dp);
        
    }*/
