
  // -------------> memoisation
  /*int solve(vector<int>&dp, int n, vector<int>&height){
   
   if(n==0)return 0;
      
    if(dp[n]!=-1)return dp[n];  
      
     int left = solve(dp, n-1, height) + abs(height[n]- height[n-1]); 
     int right= INT_MAX;
     if(n>1){
       right = solve(dp, n-2, height) + abs(height[n]- height[n-2]);
     }
      return dp[n] = min(left, right);
  }
  
    int minimumEnergy(vector<int>& height, int n) {
    
    vector<int>dp(n+1, -1);
    int ans = solve(dp, n-1, height);
    return ans;
    }
    */
    /*
    ////----------Tabulation
    int minimumEnergy(vector<int>& height, int n){
         vector<int>dp(n, -1);  
         dp[0] = 0;
          
         for(int i=1; i<n; i++){
             
             int left = dp[i-1] + abs(height[i] - height[i-1]);
             int right = INT_MAX;
             if(i>1){
                 right = dp[i-2] + abs(height[i] - height[i-2]);
             }
             dp[i] = min(left, right);
         } 
         return dp[n-1];
  } 
    */
    // space optimization
       int minimumEnergy(vector<int>& height, int n){
         int prev2 = 0;
         int prev = 0; 
         for(int i=1; i<n; i++){
             
             int left = prev + abs(height[i] - height[i-1]);
             int right = INT_MAX;
             if(i>1){
                 right = prev2 + abs(height[i] - height[i-2]);
             }
             int curr = min(left, right);
           prev2 = prev;
            prev = curr; 
             
         } 
         return prev;
  } 
