   int longestCommonSubsequence(string text1, string text2) {
       
        int n = text1.length();
        int m = text2.length();
        
       // vector<vector<int>>dp(n+1, vector<int>(m+1, 0));    
     //   return solve(n, m, text1, text2,dp);
        vector<int>prev(m+1, 0), curr(m+1, 0);
        
        for(int j=0; j<=m; j++){
        prev[j] = 0;
        }
        for(int i=0; i<=n; i++){
        curr[0] = 0;
        }
        
        
        for(int i=1; i<=n; i++){
            for(int j=1; j<=m; j++){
                
             if(text1[i-1] == text2[j-1])curr[j] = 1 + prev[j-1];   
             else  curr[j] = 0 + max(prev[j] , curr[j-1]);   
            }
            prev = curr;
        }
    return prev[m];
    
    
     }
    
    int minDistance(string text1, string text2) {
    
        int n = text1.length();
        int m = text2.length();
        int lenlcs = longestCommonSubsequence(text1, text2);
        return ((n + m )- 2*lenlcs);
    }
