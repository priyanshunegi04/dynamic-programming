 //memoisation
       int solve(int n, vector<int>&dp){
          if(n<=1)return 1;
    
       if(dp[n]!=-1)return dp[n];
        
       return dp[n]=climbStairs(n-1) + climbStairs(n-2);
    
    }
    int climbStairs(int n) {
     vector<int>dp(n+1, -1);
    int ans = solve(n, dp);
        return ans;
    }
    
    //tabulation----method
    int solve(int n, vector<int>&dp){
        dp[0] = 1;
        dp[1] = 1;
        for(int i=2; i<=n; i++){
            dp[i] = dp[i-1] + dp[i-2];
        }
        return dp[n];
    
    }
    int climbStairs(int n) {
     vector<int>dp(n+1, -1);
    int ans = solve(n, dp);
        return ans;
    }
    
    // space optimisation
    int climbStairs(int n){
       int prev1 = 1, prev2 = 1;
        for(int i =2; i<=n; i++){
            int curr = prev1 + prev2;
            prev1 = prev2;
            prev2 = curr;
        }
        return prev2;
    
